Refactoring:
    -Investigate why booting can fail immediately after HPET init. Always in the same spot, but on random builds.
        -Which means it's likely APIC init. Its not the timer calibration as that dosnt run until later.

    -Go back and replace raw pointers with NativePtr or sl::UIntPtr

    -Virtual memory mapping: move to only mapping what we need, rather than identity mapping everything.
        -Only need to recursively map the page table itself now.
    
    -Kernel::Bitmap is a hacky mess. Replace it with get/set macros or something. 
    -Explore stivale2 linker script.

    -Refocus on adding features from the list below

Platform:
    -Replace existing uses in current code with new agnostic ones.

Templates/Containers:
    -Have a standard interface, (begin()/end(), first()/last()). Go back and fix LinkedList and List implementations.
    -Frigg has a good hash table implementation.
    -Would be nice to also have: queue, stack, tree.
    -Get rid of Find(), move it and other algos to separate header. Keep data and code separate.

Time API:
    -A refactoring of the systemclock api.
    -Dont forget RDTSC exists, and is very precise once calibrated!

HPET:
    -Investigate what's actually going on here, PIT still seems to be active even after being disabled. HPET timers are not generating interrupts.
        -This sounds more like a rework.
    -Added HPET support to time api.

Memory:
    -Implement lazy allocation.
    -Ability to reserve pages, backed with a 'read only' a static page of zeros. Replace with real page only once written to.
    -Kernel-Eternal mapping: memory that'll never be freed during system runtime (all the globals), mark it as reserved into of claimed.

Logging:
    -Implement 2 stage logging. Log() only copies message details into a memory buffer. Actually accessing/displaying is implemented elsewhere, this should speed up Log().
    -Backing store for logging is circular queue - oldest messages get dropped once capacity is reached.

String Formatting:
    -Add non-integer numbers (single/double/extended precision)
    -Add features: working within pre-defined buffer, enforcing max length.
    
Panic Subsystem:
    -Must be entirely self-contained, and disaster resistant. See implementation ideas in Panic.cpp file.

Documentation:
    -Document class and function goals and intention as we go.
    -Any bulky documentation can be done in READMEs, and should be in obvious locations.

