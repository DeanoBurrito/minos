*Project Refactoring - First order of business*
    -Move all the global singleton objects xyz::The()->abc into a single structure (KernelInfo or something similar).
        -A single place to access them all. It probably wont change anything size wise, but I like the concept more.
    -System clock: abstract all available and unavailable timers through a generic clock interface.
        -It can provide accurate hi-res IRQs for scheduling
        -Local and global system uptime, as well as repeating timers and 1-shot timers.

--------------------------------

Memory management:
    -Page management, lazy allocation, and reserving sections for kernel/programs that request it.
    -Allocators: slab(8, 16, 32, 64 byte versions), stack frame allocator

Globals:
    -Keyboard handler and KRenderer both use static memory for instances, once heap is implemented, use dyanmically allocated versions.
    -printf()/sprinf() implementations. It's about time we had some better string formatting.

Interrupts:
    -mouse handlers

File system:
    -VFS base, in memory
    -Mounting/unmounting
    -Ext2 driver
    -FAT32 driver
    -proc/sys parameter dumps into filesystem
    -proper kernel logging infrastructure, ditch the krenderer.

Init disk
    -Bootloader should just kernel elf. Make a ramdisk and embed it into elf during linking stage.
Bootloader:
    -Multiboot1 formatted bootloader for direct loading in qemu, speed up dev cycles.

Userland:
    -syscall infrastructure
    -POSIX libc implementation
    -Shell
    -Windowing system

Drivers:
    -Multi-processor booting (see intel/amd manuals on this). Sortix and serenityOS as well.
    -QEMU gpu driver
    -Networking
